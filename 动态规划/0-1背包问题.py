n = 3 # 物品数目
c = 8 # 背包容量
v = [4, 2, 3] # 物品的体积
w = [5, 3, 4] # 物品的价值
dp = [[0] * (c + 1) for _ in range(n + 1)] # dp[i][j]表示前i个物品放入容量为j的背包中能获得的最大价值
for i in range(1, n + 1): # 遍历物品
    for j in range(c + 1): # 遍历背包容量
        if j < v[i - 1]: # 如果当前背包容量小于物品体积，则不能放入该物品
            dp[i][j] = dp[i - 1][j] # 不能放入该物品，则最大价值为前i-1个物品的最大价值
        else: # 如果当前背包容量大于等于物品体积，则可以选择放入或不放入该物品
            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - v[i - 1]] + w[i - 1])
# 选择放入该物品，则最大价值为前i-1个物品的最大价值加上当前物品的价值
# 选择不放入该物品，则最大价值为前i-1个物品的最大价值
print(dp[n][c]) # 输出最大价值